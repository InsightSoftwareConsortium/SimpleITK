name: InvertDisplacementFieldImageFilter
template_code_filename: ImageFilter
template_test_filename: ImageFilter
number_of_inputs: 0
pixel_types: RealVectorPixelIDTypeList
filter_type: itk::InvertDisplacementFieldImageFilter< itk::Image< itk::Vector< typename InputImageType::InternalPixelType,
  InputImageType::ImageDimension>, InputImageType::ImageDimension > >
include_files:
- itkVector.h
- sitkImageConvert.hxx
inputs:
- name: DisplacementField
  type: Image
  custom_itk_cast: |-
    filter->SetDisplacementField( GetImageFromVectorImage(const_cast< InputImageType * >(this->CastImageToITK<InputImageType>(*inDisplacementField).GetPointer())) );;
- name: InverseFieldInitialEstimate
  type: Image
  optional: true
  custom_itk_cast: |-
    filter->SetInverseFieldInitialEstimate( GetImageFromVectorImage(const_cast< InputImageType * >(this->CastImageToITK<InputImageType>(*inInverseFieldInitialEstimate).GetPointer())));
members:
- name: MaximumNumberOfIterations
  type: uint32_t
  default: 10u
  doc: Number of iterations to run
  briefdescriptionSet: ''
  detaileddescriptionSet: ""
  briefdescriptionGet: ''
  detaileddescriptionGet: ""
- name: MaxErrorToleranceThreshold
  type: double
  default: '0.1'
  briefdescriptionSet: ''
  detaileddescriptionSet: ""
  briefdescriptionGet: ''
  detaileddescriptionGet: ""
- name: MeanErrorToleranceThreshold
  type: double
  default: '0.001'
  briefdescriptionSet: ''
  detaileddescriptionSet: ""
  briefdescriptionGet: ''
  detaileddescriptionGet: ""
- name: EnforceBoundaryCondition
  type: bool
  default: 'true'
  briefdescriptionSet: ''
  detaileddescriptionSet: ""
  briefdescriptionGet: ''
  detaileddescriptionGet: ""
measurements:
- name: MaxErrorNorm
  type: double
  default: 0.0
  briefdescriptionGet: ''
  detaileddescriptionGet: ""
- name: MeanErrorNorm
  type: double
  default: 0.0
  briefdescriptionGet: ''
  detaileddescriptionGet: ""
tests:
- tag: 2d
  description: 2D
  settings:
  - parameter: MaximumNumberOfIterations
    type: uint32_t
    value: 10
  measurements_results:
  - name: MaxErrorNorm
    value: 0.3296858
    tolerance: 1.0e-07
  - name: MeanErrorNorm
    value: 0.0253612
    tolerance: 1.0e-06
  tolerance: 0.001
  inputs:
  - Input/displacement.mha
- tag: 2d_initial
  description: 2D with an initial estimate
  settings:
  - parameter: MaximumNumberOfIterations
    type: uint32_t
    value: 5
  measurements_results:
  - name: MaxErrorNorm
    value: 0.3296858
    tolerance: 1.0e-07
  - name: MeanErrorNorm
    value: 0.0055629
    tolerance: 1.0e-06
  inputs:
  - Input/displacement.mha
  - Input/inverse_displacement_10.nrrd
briefdescription: Iteratively estimates the inverse of a displacement field by fixed-point composition.
detaileddescription: >-
  \par Overview (implementation)

  Given a forward displacement field \f$ \mathbf{u}(\mathbf{x}) \f$ (mapping points \f$ \mathbf{x} \mapsto \mathbf{x} + \mathbf{u}(\mathbf{x})
  \f$ ), the inverse field \f$ \mathbf{v}(\mathbf{y}) \f$ satisfies \f[ \mathbf{x} + \mathbf{u}(\mathbf{x}) = \mathbf{y},
  \quad
   \mathbf{y} + \mathbf{v}(\mathbf{y}) = \mathbf{x}.
  \f] Eliminating \f$\mathbf{x}\f$ yields the fixed-point condition \f[ \mathbf{v}(\mathbf{y}) \approx -\,\mathbf{u}\!\left(\mathbf{y}
  + \mathbf{v}(\mathbf{y})\right).

  \f] This filter solves that condition by iterative composition starting from an initial inverse estimate (optionally supplied
  by the user). At each iteration, the forward field is interpolated at warped locations \f$ \mathbf{y} + \mathbf{v}^{(k)}(\mathbf{y})
  \f$ and the inverse is updated to reduce both the mean and max residual norms until user-specified tolerances or an iteration
  cap is reached. The implementation supports multithreading and vector-image interpolation; linear vector interpolation is
  used by default.


  \par Algorithmic sketch

  For output lattice point \f$\mathbf{y}\f$ :


  \li Initialize \f$\mathbf{v}^{(0)}(\mathbf{y})\f$ to the provided InverseFieldInitialEstimate (or zero if none).


  \li Iterate \f$k = 0,1,\dots\f$ up to MaximumNumberOfIterations (default 20): \f[ \mathbf{r}^{(k)}(\mathbf{y}) = \mathbf{u}\!\left(\mathbf{y}
  + \mathbf{v}^{(k)}(\mathbf{y})\right)
   + \mathbf{v}^{(k)}(\mathbf{y}),
  \f] \f[ \mathbf{v}^{(k+1)}(\mathbf{y}) = \mathbf{v}^{(k)}(\mathbf{y}) - \mathbf{r}^{(k)}(\mathbf{y}).

  \f]


  \li Stop when \f$\max_{\mathbf{y}}\|\mathbf{r}^{(k)}(\mathbf{y})\|\f$ and \f$\mathrm{mean}_{\mathbf{y}}\|\mathbf{r}^{(k)}(\mathbf{y})\|\f$
  fall below MaxErrorToleranceThreshold and MeanErrorToleranceThreshold .


  \par Designed usage and assumptions


  \li Best used inside iterative registration where forward updates are small and diffeomorphic at each step; supplying the
  previous iteration’s inverse as the initial estimate greatly accelerates convergence and improves robustness.


  \li Not intended to recover a full inverse from identity in one step for large deformations; prefer multi-resolution schemes,
  incremental composition, or scaling-and-squaring to stay within the contraction regime of the fixed-point map.


  \li The forward field should be (approximately) invertible in the region of interest (positive Jacobian determinant). Non-invertible
  folds will stall or diverge.


  \li Boundary handling: when EnforceBoundaryCondition=true (default), the inverse is clamped to zero at the image boundary
  to avoid extrapolation artifacts.


  \par Complexity and performance

  Each iteration performs one interpolation and vector update per voxel: \f$O(N \times I)\f$ work for \f$N\f$ voxels and \f$I\f$
  iterations. The filter parallelizes across the output region and reuses an internal composed field to minimize memory traffic.


  \par Relationship to Symmetric Normalization (SyN)

  This filter is a core component of the Symmetric Normalization (SyN) registration algorithm: at each iteration SyN updates
  forward and inverse velocity/displacement estimates symmetrically and uses this routine to maintain an explicit inverse
  field, preserving inverse-consistency during optimization


  \author Nick Tustison


  \author Brian Avants


  \par References


  \li Christensen, G. E., & Johnson, H. J. (2001). Consistent image registration. IEEE Transactions on Medical Imaging, 20(7),
  568–582.
itk_module: ITKDisplacementField
itk_group: DisplacementField
in_place: false
