#==========================================================================
#
#   Copyright NumFOCUS
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#          http://www.apache.org/licenses/LICENSE-2.0.txt
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#==========================================================================*/

# WARNING: DO NOT EDIT THIS FILE!
# THIS FILE IS AUTOMATICALLY GENERATED BY THE SIMPLEITK BUILD PROCESS.

# This is Python code to test {{ name }}
import SimpleITK
import pytest
import tempfile
from pathlib import Path
from conftest import SimpleITKTestBase


class Test{{ name }}(SimpleITKTestBase):
    """Test class for {{ name }}"""

{% if tests|length == 0 %}
    def test_no_tests_defined(self):
        """Test that fails when no tests are defined"""
        # pytest.fail("No tests defined for {{ name }}")
{% endif %}

{% for test in tests %}
    def test_{{ test.tag }}(self, data_finder):
        """{{ test.description }}"""
        writer = SimpleITK.ImageFileWriter()
        filter = SimpleITK.{{ name }}()

        # Configure filter settings
        {% for setting in test.settings %}
        {% if setting.parameter == "SeedList" and setting.python_value %}
        filter.ClearSeeds()
        {% for value in setting.python_value %}
        filter.AddSeed({{ value }})
        {% endfor %}
        {% elif setting.parameter == "TrialPoints" and setting.python_value %}
        filter.ClearTrialPoints()
        {% for value in setting.python_value %}
        filter.AddTrialPoint({{ value }})
        {% endfor %}
        {% elif setting.python_value %}
        filter.Set{{ setting.parameter }}({{ setting.python_value }})
        {% elif setting.dim_vec and setting.dim_vec == 1 %}
        filter.Set{{ setting.parameter }}(({{ setting.value | join(", ") }}))
        {% else %}
        filter.Set{{ setting.parameter }}({{ setting.value }})
        {% endif %}
        {% endfor %}

        # Load input images
        input_files = [{{ test.inputs|map('quote')|join(", ") }}]
        inputs = []

        for input_file in input_files:
            file_path = data_finder.get_file(input_file)
            assert Path(file_path).exists(), f"Input file not found: {file_path}"
            inputs.append(SimpleITK.ReadImage(file_path))

        # Apply input casts if specified
        {% if test.inputA_cast %}
        if len(inputs) > 0:
            inputs[0] = SimpleITK.Cast(inputs[0], SimpleITK.{{ test.inputA_cast }})
        {% endif %}

        {% if test.inputB_cast %}
        if len(inputs) > 1:
            inputs[1] = SimpleITK.Cast(inputs[1], SimpleITK.{{ test.inputB_cast }})
        {% endif %}

        # Execute filter
        {% if not no_return_image %}output = {% endif %}filter.Execute(*tuple(inputs))

        # Handle label images
        {% if not no_return_image %}
        labelIDs = [SimpleITK.sitkLabelUInt8, SimpleITK.sitkLabelUInt16, SimpleITK.sitkLabelUInt32, SimpleITK.sitkLabelUInt64]
        if output.GetPixelIDValue() in labelIDs:
            output = SimpleITK.LabelMapToLabel(output)

        # Write output to temporary file for validation
        with tempfile.NamedTemporaryFile(suffix='.nrrd', delete=False) as temp_file:
            writer.UseCompressionOn()
            writer.SetFileName(temp_file.name)
            writer.Execute(output)

            # Verify output file was created
            assert Path(temp_file.name).exists(), "Output file was not created"

            # Clean up temporary file
            Path(temp_file.name).unlink()

        # Hash validation using assert functions
        {% if test.md5hash -%}
        self.assert_hash_match(output, "{{ test.md5hash }}", "MD5", "{{ test.tag }}")
        {%- endif %}
        {% if test.sha1hash -%}
        self.assert_hash_match(output, "{{ test.sha1hash }}", "SHA1", "{{ test.tag }}")
        {%- endif %}

        # Image tolerance comparison using assert function
        {% if test.tolerance -%}
        baseline_filename = "BasicFilters_{{ name }}_{{ test.tag }}.nrrd"
        self.assert_image_tolerance_match(output, baseline_filename, {{ test.tolerance }}, "{{ test.tag }}", data_finder)
        {%- endif %}
        {% endif %}

        # Test measurements
        {% if test.measurements_results %}
        {% for result in test.measurements_results -%}
        {% if result.tolerance %}
        {% if result.dim_vec -%}
        # Test vector measurement {{ result.name }}
        expected_vec = [{{ result.value | join(", ") }}]
        actual_vec = filter.Get{{ result.name }}({{ result.parameters | join(", ") }})
        assert len(expected_vec) == len(actual_vec), f"{{ result.name }} vector length mismatch"
        for i in range(len(expected_vec)):
            assert abs(expected_vec[i] - actual_vec[i]) <= {{ result.tolerance }}, \
                f"{{ result.name }} vector element {i}: expected {expected_vec[i]}, got {actual_vec[i]}, tolerance {{ result.tolerance }}"
        {%- else %}
        # Test scalar measurement {{ result.name }}
        expected = {% if result.python_value is defined %}{{ result.python_value }}{% else %}{{ result.value }}{% endif %}
        actual = filter.Get{{ result.name }}({{ result.parameters | join(", ") }})
        assert abs(expected - actual) <= {{ result.tolerance }}, \
            f"{{ result.name }}: expected {expected}, got {actual}, tolerance {{ result.tolerance }}"
        {% endif %}
        {% else %}
        {% if result.value == "true" %}
        # Test boolean measurement {{ result.name }} (expected True)
        assert filter.Get{{ result.name }}({{ result.parameters | join(", ") }}), \
            "{{ result.name }} expected True"
        {% elif result.value == "false" %}
        # Test boolean measurement {{ result.name }} (expected False)
        assert not filter.Get{{ result.name }}({{ result.parameters | join(", ") }}), \
            "{{ result.name }} expected False"
        {% else %}
        # Test exact measurement {{ result.name }}
        expected = {{ result.python_value  | default( result.value ) }}
        actual = filter.Get{{ result.name }}({{ result.parameters | join(", ") }})
        assert expected == actual, \
            f"{{ result.name }}: expected {expected}, got {actual}"
        {% endif %}
        {% endif %}
        {%- endfor %}
        {% endif %}

{% endfor %}
